version:
  fromSource: pom.xml

sources:
  - type: "maven"
    path: "pom.xml"
    modules:
      - integration_tests
  - type: "maven"
    path: "markdown-statistics-tutorial/pom.xml"
    modules:
      - jar_artifact
      - integration_tests
    parentPom:
      groupId: "com.exasol"
      artifactId: "exasol-java-tutorial"
      version: "${revision}"
      relativePath: "../pom.xml"
  - type: "maven"
    path: "tls-tutorial/pom.xml"
    modules:
      - jar_artifact
      - integration_tests
    parentPom:
      groupId: "com.exasol"
      artifactId: "exasol-java-tutorial"
      version: "${revision}"
      relativePath: "../pom.xml"
  - type: "maven"
    path: "testing-tutorial/pom.xml"
    modules:
      - jar_artifact
      - integration_tests
    parentPom:
      groupId: "com.exasol"
      artifactId: "exasol-java-tutorial"
      version: "${revision}"
      relativePath: "../pom.xml"
build:
  # Generate dummy error code reports to avoid failing builds.
  # Error code crawler does not support hybrid Scala and Java projects.
  runnerOs: ubuntu-24.04
  freeDiskSpace: false
  exasolDbVersions:
    - "8.34.0"
    - "8.29.9" # Added to test support for TIMESTAMP without nano precision. Remove if/when 7.1 is re-enabled
    - "7.1.30" # Exasol 7.1.x does not yet support the latest Ubuntu version
  workflows:
    - name: "ci-build.yml"
      stepCustomizations:
        - action: REPLACE
          job: matrix-build
          stepId: verify-release-artifacts
          content:
            name: Verify Release Artifacts
            id: verify-release-artifacts
            run: |
              print_message() {
                  local -r message="$1"
                  echo "$message"
                  echo "$message" >> "$GITHUB_STEP_SUMMARY"
              }
          
              print_message "### Release Artifacts"
          
              IFS=$'\n' read -r -a artifacts_array <<<"$ARTIFACTS"
              missing_files=()
              allowed_missing_patterns=(
                "testing-tutorial/target"  # Add patterns you want to exempt here
              )
          
              is_allowed_missing() {
                  local file="$1"
                  for pattern in "${allowed_missing_patterns[@]}"; do
                      if [[ "$file" == *"$pattern"* ]]; then
                          return 0
                      fi
                  done
                  return 1
              }
          
              for file in "${artifacts_array[@]}"; do
                  echo "Checking if file $file exists..."
                  if [[ ! -f "$file" ]]; then
                      if is_allowed_missing "$file"; then
                          print_message "* ⚠️ \`$file\` is missing but allowed ⚠️"
                      else
                          print_message "* ⚠️ \`$file\` does not exist ⚠️"
                          echo "Content of directory $(dirname "$file"):"
                          ls "$(dirname "$file")"
                          missing_files+=("$file")
                      fi
                  else
                      print_message "* \`$file\` ✅"
                  fi
              done
          
              print_message ""
              number_of_missing_files=${#missing_files[@]}
              if [[ $number_of_missing_files -gt 0 ]]; then
                  print_message "⚠️ $number_of_missing_files release artifact(s) missing ⚠️"
                  exit 1
              fi
            env:
              ARTIFACTS: '${{ steps.build-pk-verify.outputs.release-artifacts }}'
    - name: ci-build.yml
      stepCustomizations:
        - action: INSERT_AFTER
          job: matrix-build
          stepId: enable-testcontainer-reuse
          content:
            name: Fix "VM Crashed" error by allowing unprivileged user namespaces
            id: fix-vm-crashed
            run: sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0



linkReplacements:
  - "https://github.com/commonmark/commonmark-java/commonmark|https://github.com/commonmark/commonmark-java"
